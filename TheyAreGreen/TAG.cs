/* So you are givern N letters. Write a program that finds the count of al lwords with no two consecutive equal characters that can be generated by reordering the given letters. The generated 
 * words should contain all given letters. If the given word meets the requirements it should also be considered in the count.
 * Input
 * The input data should be read from the console
 * On the first input line there will be the number N- the count of the letters you should use.
 * On each of the next N - lines, there will be a single character.
 * The input data will always be valid in the format described. ther eis no need to check it explicitly.
 * Output
 * The output data should be printed on the console
 * On the only output line write the count of the cords found.
 * Constrains
 * N will be between 1 and 10 inclusive. All given letters will be small Lattin letters ( 'a - z') 
 * Allowed working time for your program: 35 seconds. Allowed memory: 32MB.
 * 
 * 
 * Examples: 
 *      |---------------------------------------------------------------|                   
 *      |Example input | Example output     | Explanation               |
 *      |--------------|--------------------|---------------------------|
 *      |2             |2                   |Two possible words: "ab"   |
 *      |a             |                    |and "ba"                   |
 *      |b             |                    |                           |
 *      |---------------------------------------------------------------|
 *      |10            |3628800             |There are 3628800          |
 *      |j             |                    |possible words             |
 *      |i             |                    |                           |
 *      |h             |                    |                           |
 *      |g             |                    |                           |
 *      |f             |                    |                           |
 *      |e             |                    |                           |
 *      |d             |                    |                           |
 *      |c             |                    |                           |
 *      |b             |                    |                           |
 *      |a             |                    |                           |
 *      |---------------------------------------------------------------|
 *      
 *      |---------------------------------------------------------------|
 *      |Example input | Example output     | Explanation               |
 *      |--------------|--------------------|---------------------------|
 *      |4             |0                   |It is impossible to        |
 *      |a             |                    |construct a word           |
 *      |b             |                    |with these letters         |
 *      |a             |                    |                           |
 *      |a             |                    |                           |
 *      |---------------------------------------------------------------|
 *      |7             |1                   |The only possible word is: |
 *      |i             |                    |"ixixixi"                   |
 *      |i             |                    |                           |
 *      |x             |                    |                           |
 *      |x             |                    |                           |
 *      |x             |                    |                           |
 *      |i             |                    |                           |
 *      |i             |                    |                           |
 *      |              |                    |                           |
 *      |              |                    |                           |
 *      |              |                    |                           |
 *      |---------------------------------------------------------------|
 *     
 *      
 *      
 *      
 *      
 *      
 *      
 * 
 * 
 * 
*/

namespace TheyAreGreen
{

    using System;

    internal class TAG
    {
        private static bool NextPermutation(int[] numList)
        {
            var largestIndex = -1;

            for (var i = numList.Length - 2; i >= 0; i--)
            {
                if (numList[i] < numList[i + 1])
                {
                    largestIndex = i;
                    break;
                }
            }

            if (largestIndex < 0)
            {
                return false;
            }

            var largestIndex2 = -1;
            for (var i = numList.Length - 1; i >= 0; i--)
            {
                if (numList[largestIndex] < numList[i])
                {
                    largestIndex2 = i;
                    break;
                }
            }

            var tmp = numList[largestIndex];
            numList[largestIndex] = numList[largestIndex2];
            numList[largestIndex2] = tmp;

            for (int i = largestIndex + 1, j = numList.Length - 1; i < j; i++, j--)
            {
                tmp = numList[i];
                numList[i] = numList[j];
                numList[j] = tmp;
            }

            return true;
        }

        private static bool IsValid(int[] letters)
        {
            var previous = letters[0];

            for (var i = 1; i < letters.Length; i++)
            {
                if (letters[i] == previous)
                {
                    return false;
                }

                previous = letters[i];
            }

            return true;
        }

        private static void Main()
        {
            var N = int.Parse(Console.ReadLine());
            var letters = new int[N];

            for (var i = 0; i < N; i++)
            {
                letters[i] = char.Parse(Console.ReadLine());
            }

            Array.Sort(letters);
            var counter = 0;

            if (IsValid(letters))
            {
                counter++;
            }

            while (NextPermutation(letters))
            {
                if (IsValid(letters))
                {
                    counter++;
                }
            }

            Console.WriteLine(counter);
        }
    }

}